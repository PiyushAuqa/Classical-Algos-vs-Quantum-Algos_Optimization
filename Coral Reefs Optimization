import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt

# Load datasets
solar_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/solar_panel_power_output.csv")
wind_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/wind_turbine_output.csv")

# Constants
T_ref, G_ref, R, r_s = 25, 1000, 0.700, 18.15
k_V, k_I, eta, rho = -0.24, 0.04, 0.3, 1.225

# Objective functions
def P_SOLAR(V_oc, I_sc, G_theta, T):
    V_adj = V_oc - k_V * (T - T_ref)
    I_adj = I_sc * (G_theta / G_ref) * (1 + k_I * (T - T_ref))
    return V_adj * I_adj * (R / (R + r_s))

def P_WIND(v, D, H, L):
    return 4 * eta * 0.5 * rho * (v**3) * D * (H - (L / 2))

def P_TOTAL(position: np.ndarray) -> float:
    V_oc, I_sc, G_theta, T, v, D, H, L = position
    P_total = P_SOLAR(V_oc, I_sc, G_theta, T) + P_WIND(v, D, H, L)
    return -1 * P_total  # Minimization

# CRO Parameters
bounds = [
    (85.54, 89.74),    # V_oc
    (2.34, 25.6784736),      # I_sc
    (120, 996),  # G_theta
    (27, 35),     # T
    (0.5, 22.3),      # v
    (2, 3.01),       # H
    (0.3, 0.36),   # D
    (0.75, 1.11)    # L
]

pop_size = 20
n_generations = 100
broadcast_fraction = 0.6
asexual_fraction = 0.3
depredation_rate = 0.1

# Storage
cro_results = []
convergence_data = []

for idx in range(len(solar_df)):
    # Initialize reef
    reef = [np.array([random.uniform(*b) for b in bounds]) for _ in range(pop_size)]
    fitness = [P_TOTAL(r) for r in reef]
    best_idx = np.argmin(fitness)
    best_solution = reef[best_idx].copy()
    best_score = fitness[best_idx]
    curve = []

    for _ in range(n_generations):
        new_reef = []

        # Sexual reproduction (broadcast spawning)
        n_broadcast = int(pop_size * broadcast_fraction)
        for _ in range(n_broadcast):
            p1, p2 = random.sample(reef, 2)
            child = 0.5 * (p1 + p2) + np.random.normal(0, 0.5, len(bounds))
            child = np.clip(child, [b[0] for b in bounds], [b[1] for b in bounds])
            new_reef.append(child)

        # Asexual reproduction
        n_asexual = int(pop_size * asexual_fraction)
        for _ in range(n_asexual):
            parent = random.choice(reef)
            mutant = parent + np.random.normal(0, 0.5, len(bounds))
            mutant = np.clip(mutant, [b[0] for b in bounds], [b[1] for b in bounds])
            new_reef.append(mutant)

        # Evaluate
        new_fitness = [P_TOTAL(r) for r in new_reef]
        combined_reef = reef + new_reef
        combined_fitness = fitness + new_fitness
        sorted_indices = np.argsort(combined_fitness)
        reef = [combined_reef[i] for i in sorted_indices[:pop_size]]
        fitness = [combined_fitness[i] for i in sorted_indices[:pop_size]]

        # Depredation
        n_depredate = int(pop_size * depredation_rate)
        for _ in range(n_depredate):
            worst_idx = np.argmax(fitness)
            reef[worst_idx] = np.array([random.uniform(*b) for b in bounds])
            fitness[worst_idx] = P_TOTAL(reef[worst_idx])

        # Update best
        current_best_idx = np.argmin(fitness)
        if fitness[current_best_idx] < best_score:
            best_score = fitness[current_best_idx]
            best_solution = reef[current_best_idx].copy()

        curve.append(-best_score)

    # Save result
    cro_results.append({
        "Row_Index": idx,
        "V_oc_opt": best_solution[0],
        "I_sc_opt": best_solution[1],
        "G_theta_opt": best_solution[2],
        "T_opt": best_solution[3],
        "v_opt": best_solution[4],
        "D_opt": best_solution[5],
        "H_opt": best_solution[6],
        "L_opt": best_solution[7],
        "Max_P_TOTAL": -best_score
    })

    print(f"[Row {idx}] → V_oc*: {best_solution[0]:.2f}, I_sc*: {best_solution[1]:.2f}, G_theta*: {best_solution[2]:.2f}, "
          f"T*: {best_solution[3]:.2f}, v*: {best_solution[4]:.2f}, D*: {best_solution[5]:.2f}, "
          f"H*: {best_solution[6]:.2f}, L*: {best_solution[7]:.2f} → Max P_TOTAL: {-best_score:.2f} W")

    convergence_data.append(curve)

# Save results
cro_df = pd.DataFrame(cro_results)
cro_df.to_csv("cro_optimization_results1.csv", index=False)
cro_df.to_excel("cro_optimization_results1.xlsx", index=False)

# Convergence plot
average_curve = np.mean(convergence_data, axis=0)
epsilon = 1e-3
converged_at = len(average_curve) - 1
for i in range(1, len(average_curve)):
    if abs(average_curve[i] - average_curve[i - 1]) < epsilon:
        converged_at = i
        break

plt.figure(figsize=(10, 6))
plt.plot(average_curve, label='CRO Convergence', linewidth=2)
plt.axvline(x=converged_at, color='red', linestyle='--', label=f'Converged at Iteration {converged_at}')
plt.text(converged_at + 2, average_curve[converged_at], f'Iteration {converged_at}', color='red', fontsize=10)
plt.title("Coral Reefs Optimization Convergence")
plt.xlabel("Iteration")
plt.ylabel("Total Power Output (W)")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("cro_SW_full_8vars.svg", format="svg")
plt.show()
