import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt

# Load datasets
solar_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/solar_panel_power_output.csv")
wind_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/wind_turbine_output.csv")

# Constants
T_ref, G_ref, R, r_s = 25, 1000, 0.700, 18.15
k_V, k_I, eta, rho = -0.24, 0.04, 0.3, 1.225

# Power equations
def P_SOLAR(V_oc, I_sc, G_theta, T):
    V_adj = V_oc - k_V * (T - T_ref)
    I_adj = I_sc * (G_theta / G_ref) * (1 + k_I * (T - T_ref))
    return V_adj * I_adj * (R / (R + r_s))

def P_WIND(v, D, H, L):
    return 4 * eta * 0.5 * rho * (v ** 3) * D * (H - (L / 2))

def P_TOTAL(position):
    V_oc, I_sc, G_theta, T, v, H, D, L = position
    P_solar = P_SOLAR(V_oc, I_sc, G_theta, T)
    P_wind = P_WIND(v, D, H, L)
    return -1 * (P_solar + P_wind)  # For minimization

# SA Parameters
bounds = [
    (85.54, 89.74),    # V_oc
    (2.34, 25.6784736),      # I_sc
    (120, 996),  # G_theta
    (27, 35),     # T
    (0.5, 22.3),      # v
    (2, 3.01),       # H
    (0.3, 0.36),   # D
    (0.75, 1.11)    # L
]

max_iterations = 1000
initial_temp = 1000
cooling_rate = 0.95
epsilon = 1e-3

# Output holders
sa_results = []
convergence_data = []

# Loop through dataset rows
for idx in range(len(solar_df)):
    current_solution = np.array([random.uniform(b[0], b[1]) for b in bounds])
    current_score = P_TOTAL(current_solution)
    best_solution = current_solution.copy()
    best_score = current_score
    temp = initial_temp
    curve = []

    for _ in range(max_iterations):
        candidate = current_solution + np.random.uniform(-1, 1, len(bounds))
        candidate = np.clip(candidate, [b[0] for b in bounds], [b[1] for b in bounds])
        candidate_score = P_TOTAL(candidate)
        delta = candidate_score - current_score

        if delta < 0 or np.exp(-delta / temp) > random.random():
            current_solution = candidate
            current_score = candidate_score
            if candidate_score < best_score:
                best_score = candidate_score
                best_solution = candidate.copy()

        temp *= cooling_rate
        curve.append(-best_score)

    # Store results
    V_oc, I_sc, G_theta, T, v, H, D, L = best_solution
    sa_results.append({
        "Row_Index": idx,
        "V_oc_opt": V_oc,
        "I_sc_opt": I_sc,
        "G_theta_opt": G_theta,
        "T_opt": T,
        "v_opt": v,
        "H_opt": H,
        "D_opt": D,
        "L_opt": L,
        "Max_P_TOTAL": -best_score
    })

    print(f"[Row {idx}] → V_oc: {V_oc:.2f}, I_sc: {I_sc:.2f}, G_theta: {G_theta:.2f}, T: {T:.2f}, "
          f"v: {v:.2f}, H: {H:.2f}, D: {D:.2f}, L: {L:.2f} → Max P_TOTAL: {-best_score:.2f} W")

    convergence_data.append(curve)

# Save results
sa_df = pd.DataFrame(sa_results)
sa_df.to_csv("sa_optimization_results1.csv", index=False)
sa_df.to_excel("sa_optimization_results1.xlsx", index=False)

# Convergence analysis
average_curve = np.mean(convergence_data, axis=0)
converged_at = len(average_curve) - 1
for i in range(1, len(average_curve)):
    if abs(average_curve[i] - average_curve[i - 1]) < epsilon:
        converged_at = i
        break

# Plot
plt.figure(figsize=(10, 6))
plt.plot(average_curve, label='SA Convergence', linewidth=2)
plt.axvline(x=converged_at, color='red', linestyle='--', label=f'Converged at Iteration {converged_at}')
plt.text(converged_at + 5, average_curve[converged_at], f'Iteration {converged_at}', color='red', fontsize=10)
plt.title("Simulated Annealing Convergence")
plt.xlabel("Iteration")
plt.ylabel("Total Power Output (W)")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("sa_SW_All8.svg", format="svg")
plt.show()
