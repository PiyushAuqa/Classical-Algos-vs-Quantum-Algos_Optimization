import pandas as pd
import numpy as np
import random
import math
import matplotlib.pyplot as plt

# Load datasets
solar_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/solar_panel_power_output.csv")
wind_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/wind_turbine_output.csv")

# Constants
T_ref, G_ref, R, r_s = 25, 1000, 0.700, 18.15
k_V, k_I, eta, rho = -0.24, 0.04, 0.3, 1.225

# Objective Functions
def P_SOLAR(V_oc, I_sc, G_theta, T):
    V_adj = V_oc - k_V * (T - T_ref)
    I_adj = I_sc * (G_theta / G_ref) * (1 + k_I * (T - T_ref))
    return V_adj * I_adj * (R / (R + r_s))

def P_WIND(v, D, H, L):
    return 4 * eta * 0.5 * rho * (v ** 3) * D * (H - (L / 2))

def P_TOTAL(position: np.ndarray) -> float:
    V_oc, I_sc, G_theta, T, v, H, D, L = position
    power = P_SOLAR(V_oc, I_sc, G_theta, T) + P_WIND(v, D, H, L)
    return -1 * power  # Negated for minimization

# Bounds for each design variable (8 variables)
# [V_oc, I_sc, G_theta, T, v, H, D, L]
bounds = [
    (85.54, 89.74),    # V_oc
    (2.34, 25.6784736),      # I_sc
    (120, 996),  # G_theta
    (27, 35),     # T
    (0.5, 22.3),      # v
    (2, 3.01),       # H
    (0.3, 0.36),   # D
    (0.75, 1.11)    # L
]

pop_size = 20
n_generations = 100
pa = 0.25
alpha = 0.01

# Lévy Flight
def levy_flight(Lambda=1.5, size=8):
    sigma = (math.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2) /
             (math.gamma((1 + Lambda) / 2) * Lambda * 2 ** ((Lambda - 1) / 2))) ** (1 / Lambda)
    u = np.random.randn(size) * sigma
    v = np.random.randn(size)
    return u / (np.abs(v) ** (1 / Lambda))

# Storage
csa_results = []
convergence_data = []

for idx in range(len(solar_df)):
    # Initialize nests
    nests = [np.array([random.uniform(*b) for b in bounds]) for _ in range(pop_size)]
    fitness = [P_TOTAL(nest) for nest in nests]
    best_idx = np.argmin(fitness)
    best_nest = nests[best_idx].copy()
    best_score = fitness[best_idx]

    curve = []

    for _ in range(n_generations):
        for i in range(pop_size):
            step = levy_flight(size=8)
            new_nest = nests[i] + alpha * step
            new_nest = np.clip(new_nest, [b[0] for b in bounds], [b[1] for b in bounds])
            new_score = P_TOTAL(new_nest)
            if new_score < fitness[i]:
                nests[i] = new_nest
                fitness[i] = new_score

        for i in range(pop_size):
            if random.random() < pa:
                nests[i] = np.array([random.uniform(*b) for b in bounds])
                fitness[i] = P_TOTAL(nests[i])

        current_best_idx = np.argmin(fitness)
        if fitness[current_best_idx] < best_score:
            best_score = fitness[current_best_idx]
            best_nest = nests[current_best_idx].copy()

        curve.append(-best_score)

    # Save result
    csa_results.append({
        "Row_Index": idx,
        "V_oc": best_nest[0],
        "I_sc": best_nest[1],
        "G_theta": best_nest[2],
        "T": best_nest[3],
        "v": best_nest[4],
        "H": best_nest[5],
        "D": best_nest[6],
        "L": best_nest[7],
        "Max_P_TOTAL": -best_score
    })

    print(f"[Row {idx}] → V_oc: {best_nest[0]:.2f}, I_sc: {best_nest[1]:.2f}, G_theta: {best_nest[2]:.2f}, "
          f"T: {best_nest[3]:.2f}, v: {best_nest[4]:.2f}, H: {best_nest[5]:.2f}, "
          f"D: {best_nest[6]:.2f}, L: {best_nest[7]:.2f} → Max P_TOTAL: {-best_score:.2f} W")

    convergence_data.append(curve)

# Save Results
csa_df = pd.DataFrame(csa_results)
csa_df.to_csv("csa_optimization_results_1.csv", index=False)
csa_df.to_excel("csa_optimization_results_1.xlsx", index=False)

# Convergence Plot
average_curve = np.mean(convergence_data, axis=0)
epsilon = 1e-3
converged_at = len(average_curve) - 1
for i in range(1, len(average_curve)):
    if abs(average_curve[i] - average_curve[i - 1]) < epsilon:
        converged_at = i
        break

plt.figure(figsize=(10, 6))
plt.plot(average_curve, label='CSA Convergence', linewidth=2)
plt.axvline(x=converged_at, color='red', linestyle='--', label=f'Converged at Iteration {converged_at}')
plt.text(converged_at + 2, average_curve[converged_at], f'Iteration {converged_at}', color='red', fontsize=10)
plt.title("Cuckoo Search Convergence")
plt.xlabel("Iteration")
plt.ylabel("Total Power Output (W)")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("csa_SW1A.svg", format="svg")
plt.show()
