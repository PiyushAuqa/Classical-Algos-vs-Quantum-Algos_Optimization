import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt

# Load datasets
solar_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/solar_panel_power_output.csv")
wind_df = pd.read_csv("E:/Solar and Wind Integration/Third paper/wind_turbine_output.csv")

# Constants
T_ref, G_ref, R, r_s = 25, 1000, 0.700, 18.15
k_V, k_I, eta, rho = -0.24, 0.04, 0.3, 1.225

# Power Functions
def P_SOLAR(V_oc, I_sc, G_theta, T):
    V_adj = V_oc - k_V * (T - T_ref)
    I_adj = I_sc * (G_theta / G_ref) * (1 + k_I * (T - T_ref))
    return V_adj * I_adj * (R / (R + r_s))

def P_WIND(v, D, H, L):
    return 4 * eta * 0.5 * rho * (v ** 3) * D * (H - (L / 2))

def P_TOTAL(position):
    V_oc, I_sc, G_theta, T, v, H, D, L = position
    return -1 * (P_SOLAR(V_oc, I_sc, G_theta, T) + P_WIND(v, D, H, L))

# Jaya Parameters
bounds = [
    (85.54, 89.74),    # V_oc
    (2.34, 25.6784736),      # I_sc
    (120, 996),  # G_theta
    (27, 35),     # T
    (0.5, 22.3),      # v
    (2, 3.01),       # H
    (0.3, 0.36),   # D
    (0.75, 1.11)    # L
]

pop_size = 30
n_generations = 100

# Storage
ja_results = []
convergence_data = []

for idx in range(len(solar_df)):
    # Random initialization of population
    population = [np.array([random.uniform(b[0], b[1]) for b in bounds]) for _ in range(pop_size)]
    fitness = [P_TOTAL(ind) for ind in population]
    curve = []

    for _ in range(n_generations):
        best_idx = np.argmin(fitness)
        worst_idx = np.argmax(fitness)
        best = population[best_idx]
        worst = population[worst_idx]

        new_population = []
        new_fitness = []

        for i in range(pop_size):
            r1, r2 = np.random.rand(2)
            new_sol = population[i] + r1 * (best - abs(population[i])) - r2 * (worst - abs(population[i]))
            new_sol = np.clip(new_sol, [b[0] for b in bounds], [b[1] for b in bounds])
            new_score = P_TOTAL(new_sol)

            if new_score < fitness[i]:
                new_population.append(new_sol)
                new_fitness.append(new_score)
            else:
                new_population.append(population[i])
                new_fitness.append(fitness[i])

        population = new_population
        fitness = new_fitness
        best_score = min(fitness)
        best_solution = population[np.argmin(fitness)]
        curve.append(-best_score)

    ja_results.append({
        "Row_Index": idx,
        "V_oc_opt": best_solution[0],
        "I_sc_opt": best_solution[1],
        "G_theta_opt": best_solution[2],
        "T_opt": best_solution[3],
        "v_opt": best_solution[4],
        "H_opt": best_solution[5],
        "D_opt": best_solution[6],
        "L_opt": best_solution[7],
        "Max_P_TOTAL": -best_score
    })

    print(f"[Row {idx}] → V_oc: {best_solution[0]:.2f}, I_sc: {best_solution[1]:.2f}, "
          f"G_theta: {best_solution[2]:.2f}, T: {best_solution[3]:.2f} | "
          f"v: {best_solution[4]:.2f}, H: {best_solution[5]:.2f}, D: {best_solution[6]:.2f}, L: {best_solution[7]:.2f} "
          f"→ Max P_TOTAL: {-best_score:.2f} W")

    convergence_data.append(curve)

# Save results
ja_df = pd.DataFrame(ja_results)
ja_df.to_csv("ja_optimization_results_full1.csv", index=False)
ja_df.to_excel("ja_optimization_results_full1.xlsx", index=False)

# Convergence plot
average_curve = np.mean(convergence_data, axis=0)
epsilon = 1e-3
converged_at = len(average_curve) - 1
for i in range(1, len(average_curve)):
    if abs(average_curve[i] - average_curve[i - 1]) < epsilon:
        converged_at = i
        break

plt.figure(figsize=(10, 6))
plt.plot(average_curve, label='Jaya Convergence', linewidth=2)
plt.axvline(x=converged_at, color='red', linestyle='--', label=f'Converged at Iteration {converged_at}')
plt.text(converged_at + 2, average_curve[converged_at], f'Iteration {converged_at}', color='red', fontsize=10)
plt.title("Jaya Algorithm Convergence")
plt.xlabel("Iteration")
plt.ylabel("Total Power Output (W)")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("ja_SW1A.svg", format="svg")
plt.show()
